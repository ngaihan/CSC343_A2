-- This demo shows how we can automatically generate a series of
-- values for an attribute in psql. In A2, we use type SEQUENCE to do this.
-- The demo below explains a related type, SERIAL, to provide context.



-- Part 1: SERIAL

-- Official documentation on SERIAL:
-- https://www.postgresql.org/docs/9.4/static/datatype-numeric.html#DATATYPE-SERIAL

-- Here we define a table with an attribute whose type is SERIAL instead of,
-- say, INTEGER.
csc343h-dianeh=> CREATE TABLE clients (id SERIAL, email VARCHAR(30));
CREATE TABLE

-- We can assign values to that attribute just like usual if we wish.
-- (I have given up here on capitalizing keywords, btw.)
csc343h-dianeh=> insert into clients values 
csc343h-dianeh-> (35, 'tytyty@gmail.com'),
csc343h-dianeh-> (11, 'instigator@gmail.com');
INSERT 0 2
csc343h-dianeh=> select * from clients;
 id |        email         
----+----------------------
 35 | tytyty@gmail.com
 11 | instigator@gmail.com
(2 rows)

-- But if we don't provide a value for that attribute when we insert a row,
-- postgreSQL will do it for us.  Notice that it starts at 1 and counts up.
csc343h-dianeh=> insert into clients(email) values 
csc343h-dianeh-> ('deedee@gmail.com'), 
csc343h-dianeh-> ('ruby.max@gmail.com');
INSERT 0 2
csc343h-dianeh=> select * from clients;
 id |        email         
----+----------------------
 35 | tytyty@gmail.com
 11 | instigator@gmail.com
  1 | deedee@gmail.com
  2 | ruby.max@gmail.com
(4 rows)

-- We can also manipulate the value of the SERIAL's counter as shown below.
-- SERIAL's counter has a name that is made from the table name, plus
-- the name of the attribute of type SERIAL, plus '_seq'.
csc343h-dianeh=> select setval('clients_id_seq', 35);
 setval 
--------
     35
(1 row)

-- The next time we insert a row without providing a value for the SERIAL
-- attribute, postgreSQL advances the value by one and then uses it.
csc343h-dianeh=> insert into clients(email) values
csc343h-dianeh-> ('clementine@gmail.com');
INSERT 0 1
csc343h-dianeh=> select * from clients;
 id |        email         
----+----------------------
 35 | tytyty@gmail.com
 11 | instigator@gmail.com
  1 | deedee@gmail.com
  2 | ruby.max@gmail.com
 36 | clementine@gmail.com
(5 rows)

-- We can also set the value of the counter to a given value.
csc343h-dianeh=> select setval('clients_id_seq', 6, false);
csc343h-dianeh=> insert into clients(email) values
csc343h-dianeh-> ('icecream@gmail.com');
INSERT 0 1
csc343h-dianeh=> select * from clients;
 id |        email         
----+----------------------
 35 | tytyty@gmail.com
 11 | instigator@gmail.com
  1 | deedee@gmail.com
  2 | ruby.max@gmail.com
 36 | clementine@gmail.com
  6 | icecream@gmail.com
(6 rows)

-- If we're not careful, our SERIAL's counter can bump into an ID that we
-- are already using.
csc343h-dianeh=> select setval('clients_id_seq', 35);
 setval 
--------
     35
(1 row)

csc343h-dianeh=> insert into clients(email) values
csc343h-dianeh-> ('max@gmail.com');
INSERT 0 1
csc343h-dianeh=> select * from clients;
 id |        email         
----+----------------------
 35 | tytyty@gmail.com
 11 | instigator@gmail.com
  1 | deedee@gmail.com
  2 | ruby.max@gmail.com
 36 | clementine@gmail.com
 36 | max@gmail.com
(6 rows)

-- This didn't cause an error only because we never said the attribute id was
-- UNIQUE or a PRIMARY KEY.  If that had been the case, the INSERT INTO
-- would have been rejected.



-- Part 2: SEQUENCE

-- Official documentation on SEQUENCE: 
-- https://www.postgresql.org/docs/14/functions-sequence.html

-- The SERIAL type uses a SEQUENCE to implement its functionality. 
-- We can therefore define and use our own SEQUENCE instead. 
-- The use case is exactly as discussed above. However, with a
-- SEQUENCE, you get to choose a name for it.

csc343h-dianeh=> CREATE SEQUENCE my_seq;
CREATE SEQUENCE

csc343h-dianeh=> CREATE TABLE orders (
csc343h-dianeh=> id bigint default nextval('my_seq'), 
csc343h-dianeh=> item varchar(200)
csc343h-dianeh=> );
CREATE TABLE

csc343h-dianeh=> insert into orders(item) values ('pizza'), ('steak');
INSERT 0 2
csc343h-dianeh=> select * from orders;
 id | item  
----+-------
  1 | pizza
  2 | steak
(2 rows)

-- For this assignment, you will be working with a SEQUENCE we have defined
-- in the DDL file. It is called group_id_seq, and it is used to automatically
-- generate a sequence of unique group IDs. You will find that you need to
-- use function nextval (to advance the value of group_id_seq), and also
-- setval (to set it to a desired value).


